<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/02/09/word%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/02/09/word%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="对段落进行对齐和格式设置"><a href="#对段落进行对齐和格式设置" class="headerlink" title="对段落进行对齐和格式设置"></a>对段落进行对齐和格式设置</h3><table><thead><tr><th align="left">若要</th><th align="left">按</th></tr></thead><tbody><tr><td align="left">将段落居中。</td><td align="left">Ctrl+E</td></tr><tr><td align="left">使段落两端对齐。</td><td align="left">Ctrl+J</td></tr><tr><td align="left">将段落左对齐。</td><td align="left">Ctrl+L</td></tr><tr><td align="left">将段落右对齐。</td><td align="left">Ctrl+R</td></tr><tr><td align="left">缩进段落。</td><td align="left">Ctrl+M</td></tr><tr><td align="left">删除段落缩进。</td><td align="left">Ctrl+Shift+M</td></tr><tr><td align="left">创建悬挂缩进。</td><td align="left">Ctrl+T</td></tr><tr><td align="left">删除悬挂缩进。</td><td align="left">Ctrl+Shift+T</td></tr><tr><td align="left">删除段落格式。</td><td align="left">Ctrl+Q</td></tr><tr><td align="left">对段落应用单倍行距。</td><td align="left">Ctrl+1</td></tr><tr><td align="left">对段落应用双倍行距。</td><td align="left">Ctrl+2</td></tr><tr><td align="left">对段落应用 1.5 行距。</td><td align="left">Ctrl+5</td></tr><tr><td align="left">在段落之前添加或删除空格。</td><td align="left">Ctrl+0（零）</td></tr><tr><td align="left">启用自动格式。</td><td align="left">Ctrl+Alt+K</td></tr><tr><td align="left">应用” <strong>普通”</strong> 样式。</td><td align="left">Ctrl+Shift+N</td></tr><tr><td align="left">应用” <strong>标题 1”</strong> 样式。</td><td align="left">Ctrl+Alt+1</td></tr><tr><td align="left">应用” <strong>标题 2”</strong> 样式。</td><td align="left">Ctrl+Alt+2</td></tr><tr><td align="left">应用” <strong>标题 3”</strong> 样式。</td><td align="left">Ctrl+Alt+3</td></tr><tr><td align="left">显示” <strong>应用样式”</strong> 任务窗格。</td><td align="left">Ctrl+Shift+S</td></tr><tr><td align="left">显示” <strong>样式”</strong> 任务窗格。</td><td align="left">Ctrl+Alt+Shift+S</td></tr></tbody></table><h3 id="设置字符格式"><a href="#设置字符格式" class="headerlink" title="设置字符格式"></a>设置字符格式</h3><table><thead><tr><th align="left">若要</th><th align="left">按</th></tr></thead><tbody><tr><td align="left">显示<strong>“字体”</strong>对话框。</td><td align="left">Ctrl+D Ctrl+Shift+F</td></tr><tr><td align="left">增大字号。</td><td align="left">Ctrl+Shift+右尖括号 (&gt;)</td></tr><tr><td align="left">减小字号。</td><td align="left">Ctrl+Shift+左尖括号 (&lt;)</td></tr><tr><td align="left">逐磅增大字号。</td><td align="left">Ctrl+右方括号 (])</td></tr><tr><td align="left">逐磅减小字号。</td><td align="left">Ctrl+左中括号 ([)</td></tr><tr><td align="left">在大写、小写和标题大小写之间切换文本。</td><td align="left">Shift+F3</td></tr><tr><td align="left">将文本更改为全部大写。</td><td align="left">Ctrl+Shift+A</td></tr><tr><td align="left">隐藏所选文本。</td><td align="left">Ctrl+Shift+H</td></tr><tr><td align="left">应用加粗格式。</td><td align="left">Ctrl+B</td></tr><tr><td align="left">应用下划线格式。</td><td align="left">Ctrl+U</td></tr><tr><td align="left">对单词应用下划线格式，但不应用空格。</td><td align="left">Ctrl+Shift+W</td></tr><tr><td align="left">应用双下划线格式。</td><td align="left">Ctrl+Shift+D</td></tr><tr><td align="left">应用倾斜格式。</td><td align="left">Ctrl+I</td></tr><tr><td align="left">应用小型大写格式。</td><td align="left">Ctrl+Shift+K</td></tr><tr><td align="left">应用下标格式。</td><td align="left">Ctrl+等号 ( &#x3D; )</td></tr><tr><td align="left">应用上标格式。</td><td align="left">Ctrl+Shift+加号 (+)</td></tr><tr><td align="left">删除手动设置的字符格式。</td><td align="left">Ctrl+Spacebar</td></tr><tr><td align="left">将所选文本更改为”符号”字体。</td><td align="left">Ctrl+Shift+Q</td></tr></tbody></table><h3 id="创建文档大纲"><a href="#创建文档大纲" class="headerlink" title="创建文档大纲"></a>创建文档大纲</h3><p>这些快捷方式仅在文档位于”大纲”视图中 <strong>时</strong> 适用。</p><table><thead><tr><th align="left">执行的操作</th><th align="left">按</th></tr></thead><tbody><tr><td align="left">提升段落级别。</td><td align="left">Alt+Shift+向左键</td></tr><tr><td align="left">降低段落级别。</td><td align="left">Alt+Shift+向右键</td></tr><tr><td align="left">将段落降级为正文文本。</td><td align="left">Ctrl+Shift+N</td></tr><tr><td align="left">上移所选段落。</td><td align="left">Alt+Shift+向上箭头键</td></tr><tr><td align="left">下移所选段落。</td><td align="left">Alt+Shift+向下键</td></tr><tr><td align="left">展开标题下的文本。</td><td align="left">Alt+Shift+加号 (+)</td></tr><tr><td align="left">折叠标题下的文本。</td><td align="left">Alt+Shift+减号 (-)</td></tr><tr><td align="left">扩展或折叠所有文本或标题。</td><td align="left">Alt+Shift+A</td></tr><tr><td align="left">隐藏或显示字符格式。</td><td align="left">数字键盘 (上的正斜) (&#x2F;)</td></tr><tr><td align="left">在显示第一行正文文本和显示所有正文文本之间切换。</td><td align="left">Alt+Shift+L</td></tr><tr><td align="left">显示具有”标题 <strong>1”样式的所有</strong> 标题。</td><td align="left">Alt+Shift+1</td></tr><tr><td align="left">显示具有指定标题级别的所有标题。</td><td align="left">Alt+Shift+标题级别编号</td></tr><tr><td align="left">插入制表符。</td><td align="left">Ctrl+Tab</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/09/Git/"/>
      <url>/2023/02/09/Git/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><blockquote><p>优势</p></blockquote><ul><li>大部分操作在本地完成</li><li>完整性保证</li><li>尽可能添加数据而不是删除或修改数据</li><li>分支操作非常快捷流畅</li><li>与 Linux 命令全面兼容</li></ul><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h1 id="2-Git的安装"><a href="#2-Git的安装" class="headerlink" title="2. Git的安装"></a>2. Git的安装</h1><p>Git 各平台安装包下载地址为：<a href="http://git-scm.com![image-20201019142729630](C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019142729630.png)">http://git-scm.com![image-20201019142729630](C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019142729630.png)</a></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019142815118.png" alt="image-20201019142815118"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019142851974.png" alt="image-20201019142851974"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019142910638.png" alt="image-20201019142910638"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019143008030.png" alt="image-20201019143008030"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019143032595.png" alt="image-20201019143032595"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019143054669.png" alt="image-20201019143054669"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019143108158.png" alt="image-20201019143108158"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019143119699.png" alt="image-20201019143119699"></p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019143138813.png" alt="image-20201019143138813"></p><h1 id="3-Git-配置"><a href="#3-Git-配置" class="headerlink" title="3. Git 配置"></a>3. Git 配置</h1><p>配置个人的用户名称和电子邮件地址（这里的设置的签名和登录的远程仓库的账号、密码没有任何关系，只是为了区分是谁写的）：</p><ul><li>项目级别 &#x2F; 仓库级别：仅在当前本地仓库范围有效（保存位置：.&#x2F;git&#x2F;config 文件）<pre class=" language-shell"><code class="language-shell">$ git config user.name "rqq" # 用户名$ git config user.email test@qq.com# 邮箱</code></pre></li><li>系统用户级别：登录当前操作系统的用户范围（保存位置在：~&#x2F;.gitconfig文件）</li></ul><pre class=" language-shell"><code class="language-shell">$ git config --global user.name "rqq" # 用户名$ git config --global user.email test@qq.com# 邮箱</code></pre><p><strong>查看配置信息</strong></p><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><pre class=" language-shell"><code class="language-shell">$ git config --global --list # 查看系统用户级别的配置...user.name=rqquser.email=test@qq.com$ git config --list# 项目级别...user.name=rqquser.email=test@qq.com</code></pre><h1 id="4-Git-基本操作"><a href="#4-Git-基本操作" class="headerlink" title="4. Git 基本操作"></a>4. Git 基本操作</h1><p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</p><p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong>，后面我们会详细介绍。</p><p><img src="C:\Users\dawncoody\AppData\Roaming\Typora\typora-user-images\image-20201019153835539.png" alt="image-20201019153835539"></p><p><strong>说明：</strong></p><ul><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：或本地仓库</li><li>remote repository：远程仓库</li></ul><h2 id="4-1创建本地仓库和提交"><a href="#4-1创建本地仓库和提交" class="headerlink" title="4.1创建本地仓库和提交"></a>4.1创建本地仓库和提交</h2><p>一个简单的操作步骤：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> init  <span class="token comment" spellcheck="true"># 本地库初始化</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>file name<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#指定文件</span>$ <span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true">#所有</span>$ <span class="token function">git</span> commit -m <span class="token string">"commit message"</span> <span class="token punctuation">[</span>file name<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 提交暂存区内容到仓库</span></code></pre><ul><li>git init - 初始化仓库。</li><li>git add . - 添加文件到暂存区。</li><li>git add [file name] -指定文件添加到暂存区</li><li>git commit - 将暂存区内容添加到仓库中</li></ul><p>查看状态工作区、暂存区状态</p><pre class=" language-shell"><code class="language-shell">$ git status</code></pre><h2 id="4-2查看-commit-历史记录"><a href="#4-2查看-commit-历史记录" class="headerlink" title="4.2查看 commit 历史记录"></a>4.2查看 commit 历史记录</h2><p><code>git log</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> logcommit e851d3991f39a5d11e173c3d4ca2f82dc838d08b <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span>Author: dawncoody <span class="token operator">&lt;</span>dawntruecool@gmail.com<span class="token operator">></span>Date:   Mon Oct 19 18:29:55 2020 +0800    三次啦commit 5f37a69eafcf6fa593bc1009eed167e81ce8fd75Author: dawncoody <span class="token operator">&lt;</span>dawntruecool@gmail.com<span class="token operator">></span>Date:   Mon Oct 19 18:25:12 2020 +0800    第二次提交commit ed22de35469f0199298d3e1189f6004bb597b796Author: dawncoody <span class="token operator">&lt;</span>dawntruecool@gmail.com<span class="token operator">></span>Date:   Mon Oct 19 18:22:12 2020 +0800    第一次提交</code></pre><p>因为用 git log 显示的东西太多，所以很容易经常需要多屏显示</p><p>多屏显示的控制方式：</p><p><strong>空格向下翻页 b向上翻页 q退出</strong></p><p>可以对 log 简洁显示</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> log --pretty<span class="token operator">=</span>onelinee851d3991f39a5d11e173c3d4ca2f82dc838d08b <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span> 三次啦5f37a69eafcf6fa593bc1009eed167e81ce8fd75 第二次提交ed22de35469f0199298d3e1189f6004bb597b796 第一次提交</code></pre><p>更简洁的方式</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> log --onelinee851d39 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span> 三次啦5f37a69 第二次提交ed22de3 第一次提交</code></pre><p>看到移动到当前版本所需要的步数</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># HEAD@&amp;#123;移动到当前版本所需要的步数&amp;#125;  </span>$ <span class="token function">git</span> refloge851d39 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span> HEAD@<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;0&amp;#125;: commit: 三次啦</span>5f37a69 HEAD@<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1&amp;#125;: commit: 第二次提交</span>ed22de3 HEAD@<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;2&amp;#125;: commit: 第一次提交</span></code></pre><h2 id="4-3-前进和后退"><a href="#4-3-前进和后退" class="headerlink" title="4.3 前进和后退"></a>4.3 前进和后退</h2><ul><li><p>基于索引值<code>推荐</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> reset --hard 指针位置<span class="token comment" spellcheck="true"># 例子：git reset --hard e851d39 #回到这个状态(hash值)</span></code></pre></li><li><p>使用 <strong>^</strong> 符号<code>只能后退</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> reset --hard HEAD^<span class="token comment" spellcheck="true"># 例子：git reset --hard HEAD^^</span><span class="token comment" spellcheck="true"># 注意：几个 ^ 表示后退几步</span></code></pre></li><li><p>使用 <strong>~</strong> 符号<code>只能后退</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> reset --hard HEAD~n <span class="token comment" spellcheck="true"># 一个 ^ 表示后退一步，n 个表示后退 n 步</span><span class="token comment" spellcheck="true"># 例子：git reset --hard HEAD~3</span></code></pre></li></ul><blockquote><p>reset 的三个参数比较</p></blockquote><pre><code>--soft 参数:    - 仅仅本地仓库移动 HEAD 指针--mixed 参数:    - 在本地仓库移动 HEAD 指针    - 重置暂存区--hard 参数    - 在本地仓库移动 HEAD 指针    - 重置暂存区    - 重置工作区</code></pre><h2 id="4-4-删除文件并找回"><a href="#4-4-删除文件并找回" class="headerlink" title="4.4 删除文件并找回"></a>4.4 删除文件并找回</h2><ul><li>前提：删除前，文件存存在时的状态提交到了本地库</li><li>操作：<code>git reset --hard [指针位置]</code><ul><li>删除操作已近提交到本地库：指针指向历史记录</li><li>删除操作尚未提交到本地库：指针使用 HEAD</li></ul></li></ul><p>撤销错误添加到暂存区里的文件，可以输入以下命令：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">rm</span> --cache 文件名</code></pre><h2 id="4-5-比较文件差异"><a href="#4-5-比较文件差异" class="headerlink" title="4.5 比较文件差异"></a>4.5 比较文件差异</h2><ul><li><p>将工作区走中的文件和暂存区进行比较</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span></code></pre></li><li><p>将工作区中的文件和本地库历史记录比较</p></li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>本地仓库历史版本<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span></code></pre><ul><li><p>不带文件名比较多个文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>本地仓库历史版本<span class="token punctuation">]</span></code></pre></li></ul><h2 id="4-6-分支管理"><a href="#4-6-分支管理" class="headerlink" title="4.6 分支管理"></a>4.6 分支管理</h2><blockquote><p>什么是分支管理</p></blockquote><ul><li>在版本控制过程中，使用多条线同时推动多个任务</li></ul><blockquote><p>分支的好处</p></blockquote><ul><li>同时推进多个功能的开始，提高开发效率</li><li>各个分支在开发过程中如果某一个分支开发失败，不会对其他分支有任何影响</li></ul><blockquote><p>分支操作</p></blockquote><ul><li><p>创建分支</p><p>&#x3D;&#x3D;<code>git branch</code>&#x3D;&#x3D;</p></li><li><p>查看分支</p></li></ul><p>  &#x3D;&#x3D;<code>git branch -v</code>&#x3D;&#x3D;</p><ul><li><p>切换分支</p><p>&#x3D;&#x3D;<code>git checkout [分支名]</code>&#x3D;&#x3D;</p></li><li><p>合并分支</p><ul><li><p>第一步：切换到接受修改的分支（被合并，增加新内容）上</p><p><code>git checkout[被合并的分支名]</code></p></li><li><p>第二步：执行 <strong>merge</strong></p><p>&#x3D;&#x3D;<code>git merge [有新内容的分支名]</code>&#x3D;&#x3D;</p></li><li><p>或者</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> checkout -b 分支名 <span class="token comment" spellcheck="true"># 创建分支并直接切换到该分支</span></code></pre></li></ul></li><li><p>删除分支</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> branch -d 分支名</code></pre></li><li><p>解决冲突(当两个人对都对这个文件有修改的时候，就需要手动解决了)</p></li><li><p>第一步：编辑文件，删除特殊符号</p></li><li><p>第二步：把文件修改到满意程度，保存退出</p></li><li><p>第三步：git add [文件名]</p></li><li><p>第四步：git commit -m “日志信息”(&#x3D;&#x3D;<strong>注意：此时commit一定不能带文件名</strong>&#x3D;&#x3D;)</p></li></ul><h1 id="5-将本地仓库推送到远程仓库-Github"><a href="#5-将本地仓库推送到远程仓库-Github" class="headerlink" title="5 将本地仓库推送到远程仓库(Github)"></a>5 将本地仓库推送到远程仓库(Github)</h1><blockquote><p>创建远程库地址别名</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> remote -v <span class="token comment" spellcheck="true"># 查看远程地址别名</span>$ <span class="token function">git</span> remote add 别名<span class="token punctuation">(</span>一般用origin<span class="token punctuation">)</span> 远程地址</code></pre><blockquote><p>删除指定的远程仓库</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">rm</span> origin</code></pre><blockquote><p>修改远程仓库地址</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin <span class="token operator">&lt;</span>remote-url<span class="token operator">></span></code></pre><blockquote><p>推送</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> push 别名 分支名$ <span class="token function">git</span> push -u 别名 分支名<span class="token comment" spellcheck="true"># -u指定默认主机</span></code></pre><blockquote><p>克隆</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone <span class="token punctuation">[</span>远程地址<span class="token punctuation">]</span></code></pre><ul><li>完整的把远程库下载到本地</li><li>创建 origin 远程地址别名</li><li>初始化本地库</li></ul><blockquote><p>拉取</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> pull<span class="token punctuation">[</span>远程仓库地址<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支名<span class="token punctuation">]</span>$ <span class="token function">git</span> fetch<span class="token punctuation">[</span>远程仓库地址别名<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支名<span class="token punctuation">]</span>$ <span class="token function">git</span> merge<span class="token punctuation">[</span>远程库地址别名/远程分支名<span class="token punctuation">]</span></code></pre><ul><li>pull &#x3D; fetch + merge</li></ul><blockquote><p>解决冲突</p></blockquote><p>经常团队开发的时候都会对远程仓库进行修改，如果两个都对该仓库有修改，会发生冲突，需要解决冲突。</p><ul><li>如果不是基于 GitHub 远程库的最新版本，不能推送，必须先拉取。</li><li>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/02/09/test/"/>
      <url>/2023/02/09/test/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.dawncoody.com/">www.dawncoody.com</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
